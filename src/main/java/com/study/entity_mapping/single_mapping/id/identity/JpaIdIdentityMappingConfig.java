package com.study.entity_mapping.single_mapping.id.identity;

import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;

@Configuration
public class JpaIdIdentityMappingConfig {
    private EntityManager em;
    private EntityTransaction tx;

    @Bean
    public CommandLineRunner testJpaSingleMappingRunner(EntityManagerFactory emFactory){
        this.em = emFactory.createEntityManager();
        this.tx = em.getTransaction();

        return args -> {
            tx.begin();
            em.persist(new Member());
            tx.commit();
            Member member = em.find(Member.class, 1L);
            //Member 엔티티에 IDENTITY 전략이 적용되었기 때문에 Member 엔티티에 별도의 기본키 값을 할당하지 않음
            //em.persist(new Member(1L)); 아니라는 소리임.

            System.out.println("# memberId: " + member.getMemberId());
        };
    }
}

//결과
//Hibernate: drop table if exists member CASCADE 
//Hibernate: create table member (member_id bigint generated by default as identity, primary key (member_id))
//Hibernate: insert into member (member_id) values (default)
//# memberId: 1